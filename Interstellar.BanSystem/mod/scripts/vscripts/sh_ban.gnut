untyped

global function BanEquipment_Init

global function getWeaponBanData
global function getTitanBanData
global function getAbilityBanData
global function getGrenadeBanData
global function getBoostBanData

global function createUniversalBanStruct
global function createWeaponBanStruct
global function createTitanBanStruct
global function createBoostBanStruct

global struct WeaponBanStruct {
	string name,
	bool   disabled,
	string	  mod1,
	string    mod2,
	array <string>   visor,
	string uniqueMod,
}

global struct BoostBanStruct
{
	string name,
	bool   disabled,
	int persistantVarId,
	int burnMeterId,
}

global struct TitanBanStruct
{
	string name,
	bool disabled,

	//thanks monarch for making me  handle 3 seperet core passives
	string passive1,
	string passive2,
	string passive3,
}

global struct UniversalBanStruct
{
	string name,
	bool disabled
}

struct {
 array<WeaponBanStruct> weaponArray
 array<UniversalBanStruct> grenadeArray
 array<UniversalBanStruct> abilityArray
 array<BoostBanStruct> boostArray
 array<TitanBanStruct> titanArray
 array<string> admins
} file

void function BanEquipment_Init()
{
	Setup_AdminList()
	InitData()
	ImportData()

	AddClientCommandCallback( "BanUiUpdateData", ClientCommandCallback_BanUiUpdateData )
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///SETUP ADMIN
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void function Setup_AdminList()
{
	string cvar = GetConVarString( "grant_admin" )
	file.admins = split( cvar, "," )
}

bool function IsPlayerAdmin(entity player) {
	foreach (string admin in file.admins) {
		if (admin == player.GetUID()) {
			return true
		}
	}
	return false
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///IMPORT DATA
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void function ImportData()
{
	string data = ""
	data += GetCurrentPlaylistVarOrUseValue("BAN_DATA_0", "") + ""
	data += GetCurrentPlaylistVarOrUseValue("BAN_DATA_1", "") + ""
	data += GetCurrentPlaylistVarOrUseValue("BAN_DATA_2", "") + ""

	array< string > importArray = parseImportData( data )
	if(importArray.len() != 177)
	{
		string cVar = GetConVarString( "ban_config" )
    		importArray = parseImportData( cVar )
		if(importArray.len() == 177)
		{
			if(IsLobby()) {
				SetPlaylistVarOverride("BAN_DATA_0", cVar.slice(0,60))
				SetPlaylistVarOverride("BAN_DATA_1", cVar.slice(60,120))
				SetPlaylistVarOverride("BAN_DATA_2", cVar.slice(120))
			}
		}
		else
		{
			return
		}
  	}

	int currentIndex = 0
	for( int i = 0; i < file.abilityArray.len() + file.grenadeArray.len(); i++ )
	{
		UpdateAbility( i, importArray[currentIndex++] )
	}

	for( int i = 0; i < file.weaponArray.len(); i++ )
	{
		string updateData = ""
		updateData += importArray[currentIndex++]
		updateData += importArray[currentIndex++]
		updateData += importArray[currentIndex++]
		updateData += importArray[currentIndex++]

		UpdateWeapon( i, updateData )
	}

	for( int i = 0; i < file.titanArray.len(); i++ )
	{
		string updateData = ""
		updateData += importArray[currentIndex++]
		updateData += importArray[currentIndex++]
		updateData += importArray[currentIndex++]
		updateData += importArray[currentIndex++]

		UpdateTitan( i, updateData )
	}

	for( int i = 0; i < file.boostArray.len(); i++ )
	{
		UpdateBoost( i, importArray[currentIndex++] )
	}

	string dataToStore = ""
	foreach (UniversalBanStruct banStruct in file.abilityArray )
	{
		dataToStore += banStruct.disabled ? "1" : "0"
	}
	foreach (UniversalBanStruct banStruct in file.grenadeArray )
	{
		dataToStore += banStruct.disabled ? "1" : "0"
	}
	for(int i = 0; i < file.weaponArray.len(); i++)
	{
		dataToStore += GetWeaponStringaData(i)
	}
	for(int i = 0; i < file.titanArray.len(); i++)
	{
		dataToStore += GetTitanStringaData(i)
	}
	foreach(BoostBanStruct boostStruct in file.boostArray) {
		dataToStore += boostStruct.disabled ? "1" : "0"
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///ClientCommandCallback_BanUiUpdateData
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool function ClientCommandCallback_BanUiUpdateData( entity player, array<string> args )
{
	//TODO TEST IF PLAYER IS ALLOWED TO EDIT DATA
	if (file.admins.len() == 0) {
		if ( GetConVarInt( "ns_private_match_only_host_can_change_settings" ) >= 1 )
		{
			if ( !NSIsPlayerLocalPlayer( player ) )
			{
				return true
			}
		}
	} else {
		if (!IsPlayerAdmin(player)) {
			return true
		}
	}

	if(args.len() == 0)
	{
		return true
	}


	foreach(string changeData in args)
	{
		array<string> data = split(changeData ,"|")

		if(data.len() < 3) {
			continue
		}

		string typeToUpdate = data[0]

		switch(typeToUpdate)
		{
			case "ability":
				UpdateAbility(int(data[1]), data[2])
				break
			case "weapon":
				UpdateWeaponFromCategory(int(data[1]), int(data[2]), data[3])
				break
			case "titan":
				UpdateTitanFromCategory(int(data[1]), int(data[2]), data[3])
				break
			case "boost":
				UpdateBoost(int(data[1]), data[2])
				break

		}
	}

	string dataToStore = ""
	foreach (UniversalBanStruct banStruct in file.abilityArray )
	{
		dataToStore += banStruct.disabled ? "1" : "0"
	}
	foreach (UniversalBanStruct banStruct in file.grenadeArray )
	{
		dataToStore += banStruct.disabled ? "1" : "0"
	}
	for(int i = 0; i < file.weaponArray.len(); i++)
	{
		dataToStore += GetWeaponStringaData(i)
	}
	for(int i = 0; i < file.titanArray.len(); i++)
	{
		dataToStore += GetTitanStringaData(i)
	}
	foreach(BoostBanStruct boostStruct in file.boostArray) {
		dataToStore += boostStruct.disabled ? "1" : "0"
	}

	if(IsLobby()) {
		SetPlaylistVarOverride("BAN_DATA_0", dataToStore.slice(0,60))
		SetPlaylistVarOverride("BAN_DATA_1", dataToStore.slice(60,120))
		SetPlaylistVarOverride("BAN_DATA_2", dataToStore.slice(120))
	}


	return true
}

void function UpdateAbility(int index, string data)
{
	UniversalBanStruct structToChange

	if(index < file.abilityArray.len())
	{
		structToChange = file.abilityArray[index]
	}
	else
	{
		structToChange = file.grenadeArray[index - file.abilityArray.len()]
	}

	structToChange.disabled =  (data == "1") ? true : false
}

void function UpdateWeaponFromCategory(int category, int index, string data)
{
	switch(category) {
		case 0:
			UpdateWeapon(index, data)
			break
		case 1:
			UpdateWeapon(index + 5, data)
			break
		case 2:
			UpdateWeapon(index + 9, data)
			break
		case 3:
			UpdateWeapon(index + 12, data)
			break
		case 4:
			UpdateWeapon(index + 15, data)
			break
		case 5:
			UpdateWeapon(index + 17, data)
			break
		case 6:
			UpdateWeapon(index + 21, data)
			break
		case 7:
			UpdateWeapon(index + 26, data)
			break
	}
}

void function UpdateTitanFromCategory(int category, int index, string data)
{
	switch(category) {
		case 0:
			UpdateTitan(index, data)
			break
		case 1:
			UpdateTitan(index + 2, data)
			break
		case 2:
			UpdateTitan(index + 6, data)
			break
	}
}

void function UpdateBoost(int index, string data)
{
	file.boostArray[index].disabled = (data == "1") ? true : false
}

void function UpdateWeapon(int index, string data)
{
	WeaponBanStruct structToChange = file.weaponArray[index]
	array< string > dataAtr = parseImportData(data)

	structToChange.disabled =  dataAtr[0] == "1" ? true : false
	structToChange.mod1 = GetWeaponModStringById(dataAtr[1], structToChange)
	structToChange.mod2 = GetWeaponModStringById(dataAtr[2], structToChange)
	structToChange.visor = [GetWeaponVisorStringFromId(dataAtr[3])]
}

void function UpdateTitan(int index, string data)
{
	TitanBanStruct structToChange = file.titanArray[index]
	array< string > dataAtr = parseImportData(data)

	if( index != 5)
	{
		structToChange.disabled =  dataAtr[0] == "1" ? true : false
		structToChange.passive1 = GetTitanKitStringFromId(dataAtr[1], structToChange.name )
		structToChange.passive2 = GetTitanPassiveStringFromId(dataAtr[2])
		structToChange.passive3 = GetTitanPassiveStringFromId(dataAtr[3])
	}
	else {
		structToChange.passive1 = GetMonarchCoreStringFromId(dataAtr[1], 0)
		structToChange.passive2 = GetMonarchCoreStringFromId(dataAtr[2], 1)
		structToChange.passive3 = GetMonarchCoreStringFromId(dataAtr[3], 2)
	}

}

string function GetWeaponModStringById(string id, WeaponBanStruct weaponStruct)
{
	switch(id)
	{
		case "0":
			return "UNDEFINED"
		case "1":
			return "extended_ammo"
		case "2":
			return "pas_fast_reload"
		case "3":
			return "pas_fast_ads"
		case "4":
			return "pas_run_and_gun"
		case "5":
			return "tactical_cdr_on_kill"
		case "6":
			return "pas_fast_swap"
		case "7":
			return ""
	}
	return weaponStruct.uniqueMod
}

string function GetWeaponVisorStringFromId(string str)
{
	switch(str)
	{
		case "0":
			return "UNDEFINED"
		case "1":
			return "holosight"
		case "2":
			return "hcog"
		case "3":
			return "redline_sight"
		case "4":
			return "aog"
		case "5":
			return "scope_4x"
		case "6":
			return "threat_scope"
		case "7":
			return ""
	}
	return "UNDEFINED"
}

string function GetTitanPassiveStringFromId(string str)
{
	switch(str)
	{
		case "0":
			return "UNDEFINED"
		case "1":
			return "pas_enhanced_titan_ai"
		case "2":
			return "pas_auto_eject"
		case "3":
			return "pas_mobility_dash_capacity"
		case "4":
			return "pas_hyper_core"
		case "5":
			return "pas_build_up_nuclear_core"
		case "6":
			return "pas_anti_rodeo"
		case "7":
			return "pas_bubbleshield"
		case "8":
			return "pas_warpfall"
	}
	return "UNDEFINED"
}

string function GetTitanKitStringFromId(string str, string titanKit)
{
	if(str == "0")
	{
		return "UNDEFINED"
	}

	if(titanKit == "ion")
	{
		switch(str)
		{
			case "1":
				return "pas_ion_weapon"
			case "pas_ion_tripwire":
				return "2"
			case "3":
				return "pas_ion_vortex"
			case "4":
				return "pas_ion_lasercannon"
			case "5":
				return "pas_ion_weapon_ads"
		}
	}

	if(titanKit == "scorch")
	{
		switch(str)
		{
			case "1":
				return "pas_scorch_weapon"
			case "2":
				return "pas_scorch_selfdmg"
			case "3":
				return "pas_scorch_shield"
			case "4":
				return "pas_scorch_firewall"
			case "5":
				return "pas_scorch_flamecore"
		}
	}

	if(titanKit == "northstar")
	{
		switch(str)
		{
			case "1":
				return "pas_northstar_weapon"
			case "2":
				return "pas_northstar_cluster"
			case "3":
				return "pas_northstar_trap"
			case "4":
				return "pas_northstar_flightcore"
			case "5":
				return "pas_northstar_optics"
		}
	}

	if(titanKit == "ronin")
	{
		switch(str)
		{
			case "1":
				return "pas_ronin_weapon"
			case "2":
				return "pas_ronin_arcwave"
			case "3":
				return "pas_ronin_phase"
			case "4":
				return "pas_ronin_swordcore"
			case "5":
				return "pas_ronin_autoshift"
		}
	}

	if(titanKit == "tone")
	{
		switch(str)
		{
			case "1":
				return "pas_tone_weapon"
			case "2":
				return "pas_tone_wall"
			case "3":
				return "pas_tone_sonar"
			case "4":
				return "pas_tone_rockets"
			case "5":
				return "pas_tone_burst"
		}
	}

	if(titanKit == "legion")
	{
		switch(str)
		{
			case "1":
				return "pas_enhanced_titan_ai"
			case "2":
				return "pas_legion_smartcore"
			case "3":
				return "pas_legion_gunshield"
			case "4":
				return "pas_legion_spinup"
			case "5":
				return "pas_legion_chargeshot"
		}
	}

	if(titanKit == "vanguard")
	{
		switch(str)
		{
			case "1":
				return "pas_vanguard_shield"
			case "2":
				return "pas_vanguard_coremeter"
			case "3":
				return "pas_vanguard_rearm"
			case "4":
				return "pas_vanguard_doom"
		}
	}
	return "UNDEFINED"
}

string function GetMonarchCoreStringFromId(string str, int coreStage)
{
	if(str == "0")
	{
		return "UNDEFINED"
	}
	if(coreStage == 0)
	{
		switch(str)
		{
			case "1":
				return "pas_vanguard_core1"
			case "2":
				return "pas_vanguard_core2"
			case "3":
				return "pas_vanguard_core3"
		}
	}

	if(coreStage == 1)
	{
		switch(str)
		{
			case "1":
				return "pas_vanguard_core4"
			case "2":
				return "pas_vanguard_core5"
			case "3":
				return "pas_vanguard_core6"
		}
	}
	if(coreStage == 2)
	{
		switch(str)
		{
			case "1":
				return "pas_vanguard_core7"
			case "2":
				return "pas_vanguard_core8"
			case "3":
				return "pas_vanguard_core9"
		}
	}
	return "UNDEFINED"
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///Serialize data
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

string function GetWeaponStringaData(int id)
{
	if(id == -1) {
		return "0000"
	}
	WeaponBanStruct currentStruct = file.weaponArray[id]
	string data = ""
	data += currentStruct.disabled ? "1" : "0"
	data += GetWeaponModIdFromString(currentStruct.mod1)
	data += GetWeaponModIdFromString(currentStruct.mod2)
	data += GetWeaponVisorIdFromString(currentStruct.visor[0])
	return data
}

string function GetWeaponModIdFromString(string str)
{
	switch(str)
	{
		case "UNDEFINED":
			return "0"
		case "extended_ammo":
			return "1"
		case "pas_fast_reload":
			return "2"
		case "pas_fast_ads":
			return "3"
		case "pas_run_and_gun":
			return "4"
		case "tactical_cdr_on_kill":
			return "5"
		case "pas_fast_swap":
			return "6"
		case "":
			return "7"
	}
	return "8"
}

string function GetWeaponVisorIdFromString(string str)
{
	switch(str)
	{
		case "UNDEFINED":
			return "0"
		case "holosight":
			return "1"
		case "hcog":
			return "2"
		case "redline_sight":
			return "3"
		case "aog":
			return "4"
		case "scope_4x":
			return "5"
		case "threat_scope":
			return "6"
		case "":
			return "7"
	}
	return "0"
}

string function GetTitanStringaData(int id)
{
	if(id == -1) {
		return "0000"
	}
	TitanBanStruct currentStruct = file.titanArray[id]
	string data = ""
	if(id != 5)
	{
		data += currentStruct.disabled ? "1" : "0"
		data += GetTitanKitIdFromStr(currentStruct.passive1, currentStruct.name)
		data += GetTitanPassiveIdFromStr(currentStruct.passive2)
		data += GetTitanPassiveIdFromStr(currentStruct.passive3)
	} else
	{
		data += "1"
		data += GetMonarchCoreIdFromString(currentStruct.passive1, 0)
		data += GetMonarchCoreIdFromString(currentStruct.passive2, 1)
		data += GetMonarchCoreIdFromString(currentStruct.passive3, 2)
	}

	return data
}

string function GetTitanPassiveIdFromStr(string str)
{
	switch(str)
	{
		case "UNDEFINED":
			return "0"
		case "pas_enhanced_titan_ai":
			return "1"
		case "pas_auto_eject":
			return "2"
		case "pas_mobility_dash_capacity":
			return "3"
		case "pas_hyper_core":
			return "4"
		case "pas_build_up_nuclear_core":
			return "5"
		case "pas_anti_rodeo":
			return "6"
		case "pas_bubbleshield":
			return "7"
		case "pas_warpfall":
			return "8"
	}
	return "0"
}

string function GetTitanKitIdFromStr(string str, string titanKit)
{
	if(str == "UNDEFINED")
	{
		return "0"
	}

	if(titanKit == "ion")
	{
		switch(str)
		{
			case "pas_ion_weapon":
				return "1"
			case "pas_ion_tripwire":
				return "2"
			case "pas_ion_vortex":
				return "3"
			case "pas_ion_lasercannon":
				return "4"
			case "pas_ion_weapon_ads":
				return "5"
		}
	}

	if(titanKit == "scorch")
	{
		switch(str)
		{
			case "pas_scorch_weapon":
				return "1"
			case "pas_scorch_selfdmg":
				return "2"
			case "pas_scorch_shield":
				return "3"
			case "pas_scorch_firewall":
				return "4"
			case "pas_scorch_flamecore":
				return "5"
		}
	}

	if(titanKit == "northstar")
	{
		switch(str)
		{
			case "pas_northstar_weapon":
				return "1"
			case "pas_northstar_cluster":
				return "2"
			case "pas_northstar_trap":
				return "3"
			case "pas_northstar_flightcore":
				return "4"
			case "pas_northstar_optics":
				return "5"
		}
	}

	if(titanKit == "ronin")
	{
		switch(str)
		{
			case "pas_ronin_weapon":
				return "1"
			case "pas_ronin_arcwave":
				return "2"
			case "pas_ronin_phase":
				return "3"
			case "pas_ronin_swordcore":
				return "4"
			case "pas_ronin_autoshift":
				return "5"
		}
	}

	if(titanKit == "tone")
	{
		switch(str)
		{
			case "pas_tone_weapon":
				return "1"
			case "pas_tone_wall":
				return "2"
			case "pas_tone_sonar":
				return "3"
			case "pas_tone_rockets":
				return "4"
			case "pas_tone_burst":
				return "5"
		}
	}

	if(titanKit == "legion")
	{
		switch(str)
		{
			case "pas_enhanced_titan_ai":
				return "1"
			case "pas_legion_smartcore":
				return "2"
			case "pas_legion_gunshield":
				return "3"
			case "pas_legion_spinup":
				return "4"
			case "pas_legion_chargeshot":
				return "5"
		}
	}

	if(titanKit == "vanguard")
	{
		switch(str)
		{
			case "pas_vanguard_shield":
				return "1"
			case "pas_vanguard_coremeter":
				return "2"
			case "pas_vanguard_rearm":
				return "3"
			case "pas_vanguard_doom":
				return "4"
		}
	}
	return "0"
}

string function GetMonarchCoreIdFromString(string str, int coreStage)
{
	if(str == "UNDEFINED")
	{
		return "0"
	}
	if(coreStage == 0)
	{
		switch(str)
		{
			case "pas_vanguard_core1":
				return "1"
			case "pas_vanguard_core2":
				return "2"
			case "pas_vanguard_core3":
				return "3"
		}
	}

	if(coreStage == 1)
	{
		switch(str)
		{
			case "pas_vanguard_core4":
				return "1"
			case "pas_vanguard_core5":
				return "2"
			case "pas_vanguard_core6":
				return "3"
		}
	}
	if(coreStage == 2)
	{
		switch(str)
		{
			case "pas_vanguard_core7":
				return "1"
			case "pas_vanguard_core8":
				return "2"
			case "pas_vanguard_core9":
				return "3"
		}
	}
	return "0"
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///Get data
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

array<WeaponBanStruct> function getWeaponBanData()
{
	return file.weaponArray
}

array<UniversalBanStruct> function getGrenadeBanData()
{
	return file.grenadeArray
}

array<UniversalBanStruct> function getAbilityBanData()
{
	return file.abilityArray
}

array<BoostBanStruct> function getBoostBanData()
{
	return file.boostArray
}

array<TitanBanStruct> function getTitanBanData()
{
	return file.titanArray
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///Setup data
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void function InitData()
{
	file.grenadeArray = []
	file.grenadeArray.append(createUniversalBanStruct("mp_weapon_frag_grenade"))
	file.grenadeArray.append(createUniversalBanStruct("mp_weapon_grenade_emp"))
	file.grenadeArray.append(createUniversalBanStruct("mp_weapon_thermite_grenade"))
	file.grenadeArray.append(createUniversalBanStruct("mp_weapon_grenade_gravity"))
	file.grenadeArray.append(createUniversalBanStruct("mp_weapon_grenade_electric_smoke"))
	file.grenadeArray.append(createUniversalBanStruct("mp_weapon_satchel"))

	file.abilityArray = []
	file.abilityArray.append(createUniversalBanStruct("mp_ability_cloak"))
	file.abilityArray.append(createUniversalBanStruct("mp_weapon_grenade_sonar"))
	file.abilityArray.append(createUniversalBanStruct("mp_ability_grapple"))
	file.abilityArray.append(createUniversalBanStruct("mp_ability_heal"))
	file.abilityArray.append(createUniversalBanStruct("mp_weapon_deployable_cover"))
	file.abilityArray.append(createUniversalBanStruct("mp_ability_shifter"))
	file.abilityArray.append(createUniversalBanStruct("mp_ability_holopilot"))

	file.boostArray = []

	file.boostArray.append(createBoostBanStruct("burnmeter_amped_weapons" 	  ,1, 11))
	file.boostArray.append(createBoostBanStruct("burnmeter_ticks" 			  ,2, 12))
	file.boostArray.append(createBoostBanStruct("burnmeter_ap_turret_weapon"  ,4, 18))
	file.boostArray.append(createBoostBanStruct("burnmeter_maphack" 		  ,0, 10))
	file.boostArray.append(createBoostBanStruct("burnmeter_emergency_battery" ,8, 20))
	file.boostArray.append(createBoostBanStruct("burnmeter_radar_jammer" 	  ,10, 22))
	file.boostArray.append(createBoostBanStruct("burnmeter_at_turret_weapon"  ,6, 17))
	file.boostArray.append(createBoostBanStruct("burnmeter_smart_pistol" 	  ,9, 21))
	file.boostArray.append(createBoostBanStruct("burnmeter_phase_rewind" 	  ,5, 16))
	file.boostArray.append(createBoostBanStruct("burnmeter_hard_cover" 		  ,11, 23))
	file.boostArray.append(createBoostBanStruct("burnmeter_holopilot_nova" 	  ,7, 19))
	file.boostArray.append(createBoostBanStruct("burnmeter_random_foil" 	  ,3, 14))

	file.weaponArray = []
	//index 0-29
	//index 0 - 22 primary
	//index 23 - 25 sec
	// index 26 - 29 at
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_rspn101"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_rspn101_og"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_hemlok"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_g2"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_vinson"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_car"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_alternator_smg"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_hemlok_smg"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_r97"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_lmg"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_lstar"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_esaw"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_sniper", "ricochet"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_doubletake", "ricochet"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_dmr"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_shotgun"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_mastiff"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_smr"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_epg"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_softball"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_pulse_lmg"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_wingman_n", "ricochet"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_shotgun_pistol"))

	file.weaponArray.append(createWeaponBanStruct("mp_weapon_autopistol", "silencer"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_semipistol", "silencer"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_wingman", "silencer"))


	file.weaponArray.append(createWeaponBanStruct("mp_weapon_defender", "quick_charge"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_mgl"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_arc_launcher"))
	file.weaponArray.append(createWeaponBanStruct("mp_weapon_rocket_launcher"))

	file.titanArray = []
	file.titanArray.append(createTitanBanStruct("northstar"))
	file.titanArray.append(createTitanBanStruct("ronin"))

	file.titanArray.append(createTitanBanStruct("ion"))
	file.titanArray.append(createTitanBanStruct("tone"))
	file.titanArray.append(createTitanBanStruct("vanguard"))
	file.titanArray.append(createTitanBanStruct("vanguardCores", true))

	file.titanArray.append(createTitanBanStruct("scorch"))
	file.titanArray.append(createTitanBanStruct("legion"))
}

UniversalBanStruct function createUniversalBanStruct(string name)
{
	UniversalBanStruct newStruct
	newStruct.name = name
	newStruct.disabled = false
	return newStruct
}

WeaponBanStruct function createWeaponBanStruct(string name, string uniqueMod = "")
{
	WeaponBanStruct newStruct
	newStruct.name = name
	newStruct.disabled = false
	newStruct.mod1 = "UNDEFINED"
	newStruct.mod2 = "UNDEFINED"
	newStruct.visor = ["UNDEFINED"]
	newStruct.uniqueMod = uniqueMod

	return newStruct
}

BoostBanStruct function createBoostBanStruct(string name, int persistantVarId, int burnMeterId)
{
	BoostBanStruct newStruct
	newStruct.name = name
	newStruct.disabled = false
	newStruct.persistantVarId = persistantVarId
	newStruct.burnMeterId = burnMeterId
	return newStruct
}

TitanBanStruct function createTitanBanStruct(string name, bool disabled = false)
{
	TitanBanStruct newStruct
	newStruct.name = name
	newStruct.disabled = disabled
	newStruct.passive1 = "UNDEFINED"
	newStruct.passive2 = "UNDEFINED"
	newStruct.passive3 = "UNDEFINED"
	return newStruct
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///Utility
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

array< string > function parseImportData(string importData)
{
  array< string > importArray
  for(int i = 0; i < importData.len(); i++) {
    switch (importData[i]) {
      case 48:
        importArray.append("0")
        break
      case 49:
        importArray.append("1")
        break
      case 50:
        importArray.append("2")
        break
      case 51:
        importArray.append("3")
        break
      case 52:
        importArray.append("4")
        break
      case 53:
        importArray.append("5")
        break
      case 54:
        importArray.append("6")
        break
      case 55:
        importArray.append("7")
        break
      case 56:
        importArray.append("8")
        break
    }
  }
  return importArray
}
